import { type NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { FormGroup } from "../components/FormGroup";
import Input from "../components/Input";
import { generateRouter } from "../server/api/routers/generate";
import { api } from "../utils/api";

const GeneratePage: NextPage = () => {
  const [form, setForm] = useState({
    prompt: "",
  });

  // we just create generate.ts file
  // Now we have this object: generateIcon that has methods on it that we can call to generate the icon in the backend
  const generateIcon = api.generate.generateIcon.useMutation({
    onSuccess(data) {
      console.log("mutation finished", data.message);
    },
  });

  // creating a function that return a function
  // We can abstract this function away, make it a utility function
  function updateForm(key: string) {
    return function (e: React.ChangeEvent<HTMLInputElement>) {
      setForm((prev) => ({
        ...prev,
        [key]: e.target.value,
      }));
    };
  }

  function handleFormSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault();
    console.log(
      "submitting the form data to the backend, this is where tRPC starts to come to the play."
    );
    generateIcon.mutate({
      prompt: form.prompt,
    });
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center">
        {/* <h1>Let's generate your icon.</h1> */}
        <form onSubmit={handleFormSubmit} className="flex flex-col gap-4">
          <FormGroup>
            <label>Prompt</label>
            <Input value={form.prompt} onChange={updateForm("prompt")}></Input>
          </FormGroup>

          <button className="rounded-md bg-orange-900 px-4 py-2 font-semibold uppercase hover:bg-orange-800">
            Generate Icons
          </button>
        </form>
      </main>
    </>
  );
};

export default GeneratePage;
